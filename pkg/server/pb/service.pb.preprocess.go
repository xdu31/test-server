// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/xdu31/test-server/pkg/server/pb/service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/xdu31/test-server/pkg/server/pb/service.proto

It has these top-level messages:
	Ip
	CreateIpRequest
	CreateIpResponse
	ReadIpRequest
	ReadIpResponse
	UpdateIpRequest
	UpdateIpResponse
	DeleteIpRequest
	DeleteIpResponse
	ListIpsRequest
	ListIpsResponse
*/
package pb

import strings "strings"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"
import _ "github.com/infobloxopen/protoc-gen-preprocess/options"
import _ "google.golang.org/genproto/protobuf/field_mask"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (m *Ip) Preprocess() error {

	m.IpAddress = strings.TrimSpace(m.IpAddress)

	return nil
}

func (m *CreateIpRequest) Preprocess() error {

	if m.Payload != nil {
		m.Payload.Preprocess()
	}

	return nil
}

func (m *CreateIpResponse) Preprocess() error {

	if m.Result != nil {
		m.Result.Preprocess()
	}

	return nil
}

func (m *ReadIpRequest) Preprocess() error {

	return nil
}

func (m *ReadIpResponse) Preprocess() error {

	if m.Result != nil {
		m.Result.Preprocess()
	}

	return nil
}

func (m *UpdateIpRequest) Preprocess() error {

	if m.Payload != nil {
		m.Payload.Preprocess()
	}

	return nil
}

func (m *UpdateIpResponse) Preprocess() error {

	if m.Result != nil {
		m.Result.Preprocess()
	}

	return nil
}

func (m *DeleteIpRequest) Preprocess() error {

	return nil
}

func (m *DeleteIpResponse) Preprocess() error {

	return nil
}

func (m *ListIpsRequest) Preprocess() error {

	return nil
}

func (m *ListIpsResponse) Preprocess() error {

	for _, v := range m.Results {
		if v != nil {
			v.Preprocess()
		}
	}

	return nil
}
